# ConfigMap-Based Protection Example
#
# This example demonstrates how cluster administrators can protect
# important management labels using a centralized ConfigMap.

---
# Admin-controlled protection configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: namespacelabel-protection-config
  namespace: namespacelabel-system
data:
  patterns: |
    - "kubernetes.io/*"              # Protect all kubernetes.io labels
    - "*.k8s.io/*"                  # Protect all k8s.io domain labels
    - "pod-security.kubernetes.io/*" # Protect pod security labels
    - "istio.io/*"                  # Protect service mesh labels
    - "compliance.company.com/*"     # Protect compliance labels
  mode: skip  # "skip" or "fail"

---
# Create a namespace with some existing management labels
apiVersion: v1
kind: Namespace
metadata:
  name: production-app
  labels:
    # These labels were set by the platform team and are protected
    kubernetes.io/managed-by: "platform-team"
    pod-security.kubernetes.io/enforce: "restricted"
    istio.io/rev: "stable"
    compliance.company.com/level: "high"

---
# NamespaceLabel with protection (SKIP mode - default)
apiVersion: labels.shahaf.com/v1alpha1
kind: NamespaceLabel
metadata:
  name: labels
  namespace: production-app
spec:
  labels:
    # Application labels (will be applied)
    app: "production-app"
    version: "2.1.0"
    environment: "production"
    team: "backend"
    
    # These would conflict with existing protected labels and will be skipped
    kubernetes.io/managed-by: "namespacelabel-operator"  # Protected - will be skipped
    pod-security.kubernetes.io/enforce: "baseline"       # Protected - will be skipped
    compliance.company.com/level: "medium"               # Protected - will be skipped

---
# Example with FAIL mode (strict enforcement)
# To test this, first apply the fail-mode ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: namespacelabel-protection-config-fail
  namespace: namespacelabel-system
data:
  patterns: |
    - "kubernetes.io/*"
    - "*.k8s.io/*"
    - "pod-security.kubernetes.io/*"
    - "security.*"
  mode: fail  # Will fail reconciliation on conflicts

---
# Create critical namespace for the fail example
apiVersion: v1
kind: Namespace
metadata:
  name: critical-system
  labels:
    kubernetes.io/managed-by: "security-team"
    security.company.com/zone: "restricted"

---
# NamespaceLabel that will succeed (no conflicts)
apiVersion: labels.shahaf.com/v1alpha1
kind: NamespaceLabel
metadata:
  name: labels
  namespace: critical-system
spec:
  labels:
    app: "critical-system"
    environment: "production"
    tier: "system"
    # Note: No conflicting protected labels included

---
# Testing Instructions:
#
# 1. Apply this manifest:
#    kubectl apply -f protection-patterns.yaml
#
# 2. Check the protection ConfigMap:
#    kubectl get configmap namespacelabel-protection-config -n namespacelabel-system -o yaml
#
# 3. Check the results:
#    kubectl get namespace production-app --show-labels
#    kubectl get namespace critical-system --show-labels
#
# 4. Check NamespaceLabel status:
#    kubectl get namespacelabel labels -n production-app -o yaml
#    kubectl get namespacelabel labels -n critical-system -o yaml
#
# 5. Test FAIL mode by switching ConfigMaps:
#    kubectl delete configmap namespacelabel-protection-config -n namespacelabel-system
#    kubectl apply -f - <<EOF
#    apiVersion: v1
#    kind: ConfigMap
#    metadata:
#      name: namespacelabel-protection-config
#      namespace: namespacelabel-system
#    data:
#      patterns: |
#        - "kubernetes.io/*"
#      mode: fail
#    EOF
#
#    # Now try to create a conflicting NamespaceLabel:
#    kubectl apply -f - <<EOF
#    apiVersion: labels.shahaf.com/v1alpha1
#    kind: NamespaceLabel
#    metadata:
#      name: labels
#      namespace: default
#    spec:
#      labels:
#        kubernetes.io/managed-by: "test-operator"  # This will fail
#    EOF
#
# 6. Check the failure status:
#    kubectl get namespacelabel labels -n default -o yaml
#    # Look for status.conditions with type "Degraded" and reason "ProtectionError"