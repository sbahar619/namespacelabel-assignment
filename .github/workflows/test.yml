name: Test

on:
  pull_request:
    branches: [ main, develop, remove-ns-annotations, namespacelabel-operator ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:  # Allow manual triggering

env:
  GO_VERSION: '1.23.5'
  GOLANGCI_LINT_VERSION: 'v1.61.0'

jobs:
  # Setup dependencies and cache for other jobs
  dependencies:
    name: Dependencies
    runs-on: ubuntu-latest
    outputs:
      go-cache-key: ${{ steps.setup-go.outputs.cache-key }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go environment
      id: setup-go
      uses: ./.github/actions/setup-go
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Verify go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

  # Fast build verification 
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go environment
      uses: ./.github/actions/setup-go
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Quick build check
      run: go build -v ./...

  # Parallel jobs that run after dependencies are ready
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go environment
      uses: ./.github/actions/setup-go
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        args: --timeout=5m

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go environment
      uses: ./.github/actions/setup-go
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Clean bin directory (force fresh tools)
      run: rm -rf ./bin/

    - name: Install test dependencies
      run: make envtest ginkgo

    - name: Debug environment
      run: |
        echo "=== Environment Debug ==="
        go version
        echo "GOPATH: $GOPATH"
        echo "GOCACHE: $GOCACHE" 
        echo "PWD: $(pwd)"
        ls -la
        echo "=== Bin directory ==="
        ls -la bin/ || echo "No bin directory"
        echo "=== Go env ==="
        go env

    - name: Run unit tests with coverage
      run: |
        echo "=== Starting tests ==="
        make test 2>&1 | tee test-output.log
        TEST_EXIT_CODE=${PIPESTATUS[0]}
        echo "=== Test exit code: $TEST_EXIT_CODE ==="
        echo "=== Last 50 lines of output ==="
        tail -50 test-output.log
        if [ $TEST_EXIT_CODE -ne 0 ]; then
          echo "=== Full test output ==="
          cat test-output.log
          echo "=== Retrying with reduced parallelism ==="
          GOMAXPROCS=1 go test -v ./internal/controller/ ./internal/webhook/... -coverprofile=cover.out
          exit $?
        fi
        go tool cover -html=cover.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./cover.out
        flags: unittests
        name: codecov-umbrella

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=cover.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Current coverage: ${COVERAGE}%"
        if (( $(echo "${COVERAGE} < 80" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below threshold of 80%"
          exit 1
        fi
        echo "✅ Coverage ${COVERAGE}% meets threshold"
